{"title":"RunLoop底层原理","date":"2021-11-16T16:00:00.000Z","date_formatted":{"ll":"Nov 17, 2021","L":"11/17/2021","MM-DD":"11-17"},"author":"HongWeiChen","link":"2021/11/17/2021-11-17-RunLoop底层原理","tags":["iOS"],"updated":"2022-01-25T06:50:42.821Z","content":"<p>RunLoop是一个抽象的概念，指的是事件池，一个线程对应一个RunLoop，RunLoop主要的作用就是接收消息（例如：用户点击按钮，页面滚动），不需要处理消息的时候进行休眠（例如：进入App后台）。</p>\n<h1 id=\"runloop底层分析\">RunLoop底层分析<a title=\"#runloop底层分析\" href=\"#runloop底层分析\"></a></h1>\n<h1 id=\"runloop的概念\">RunLoop的概念<a title=\"#runloop的概念\" href=\"#runloop的概念\"></a></h1>\n<p>RunLoop实际上就是一个事件池，通常我们一个线程在执行结束后就会退出，而当我们需要一个线程需要随时能够处理消息或事件时，我们就需要一个RunLoop来保证线程不停的执行。</p>\n<p>而实现RunLoop核心点在如何让RunLoop管理接收消息和事件，并且在没有消息或者事件时，进行休眠，等待接收消息时唤醒。</p>\n<h1 id=\"runloop和线程之间的关系\">RunLoop和线程之间的关系<a title=\"#runloop和线程之间的关系\" href=\"#runloop和线程之间的关系\"></a></h1>\n<p>RunLoop和线程是一一对应的关系，所有的RunLoop会存在与一个Dictionary中，thread是Dictionary的Key，是RunLoop对象则是Value，也就是RunLoop是通过线程取出得。我们没有办法显示的创建RunLoop，不论是NSRunLoop还是CFRunLoop，RunLoop的方法_CFRunLoopCreate()并没有对外部进行开放.</p>\n<h1 id=\"runloop是在什么时候创建的\">RunLoop是在什么时候创建的<a title=\"#runloop是在什么时候创建的\" href=\"#runloop是在什么时候创建的\"></a></h1>\n<p>RunLoop是在线程产生交互后，系统会在内部获取RunLoop，当从Dictionary中获取不到RunLoop时，则会创建一个新的RunLoop，然后设置到Dictionary中。</p>\n<h1 id=\"runloop有哪几种模式\">RunLoop有哪几种模式<a title=\"#runloop有哪几种模式\" href=\"#runloop有哪几种模式\"></a></h1>\n<ul>\n<li><a href=\"#default\">default</a></li>\n<li><a href=\"#connection\">connection</a></li>\n<li><a href=\"#modal\">modal</a></li>\n<li>[event tracking](#event tracking)</li>\n<li><a href=\"#common\">common</a></li>\n</ul>\n<h1 id=\"default\">default<a title=\"#default\" href=\"#default\"></a></h1>\n<p>默认一般使用Default，Default几乎包含了除了Connection外所有的模式。</p>\n<h1 id=\"connection\">connection<a title=\"#connection\" href=\"#connection\"></a></h1>\n<p>Connection一般是在处理NSConnection对象相关事件时使用，一般在系统内部使用。</p>\n<h1 id=\"modal\">modal<a title=\"#modal\" href=\"#modal\"></a></h1>\n<p>处理模态视图事件使用</p>\n<h1 id=\"event-tracking\">event tracking<a title=\"#event-tracking\" href=\"#event-tracking\"></a></h1>\n<p>在拖动Loop或者其他User interface tracking loop时处于此模式下，此模式会限制输入事件的处理。</p>\n<h1 id=\"common\">common<a title=\"#common\" href=\"#common\"></a></h1>\n<p>这是一个伪模式，这个模式意味所有事件都可以处理。</p>\n","prev":{"title":"React-Native中常用的命令","link":"2021/12/15/2021-12-15-React-Native常用命令"},"next":{"title":"MRC下retain所影响retainCount的变化","link":"2021/11/15/2021-11-15-MRC下retain所影响retainCount的变化"},"plink":"http://hongweichen.github.io/2021/11/17/2021-11-17-RunLoop底层原理/","toc":[{"id":"runloop底层分析","title":"RunLoop底层分析","index":"1"},{"id":"runloop的概念","title":"RunLoop的概念","index":"2"},{"id":"runloop和线程之间的关系","title":"RunLoop和线程之间的关系","index":"3"},{"id":"runloop是在什么时候创建的","title":"RunLoop是在什么时候创建的","index":"4"},{"id":"runloop有哪几种模式","title":"RunLoop有哪几种模式","index":"5"},{"id":"default","title":"default","index":"6"},{"id":"connection","title":"connection","index":"7"},{"id":"modal","title":"modal","index":"8"},{"id":"event-tracking","title":"event tracking","index":"9"},{"id":"common","title":"common","index":"10"}],"reading_time":"474 words in 3 min"}