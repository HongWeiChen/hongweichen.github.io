{"title":"React-Native运行原理","date":"2021-11-09T16:00:00.000Z","date_formatted":{"ll":"Nov 10, 2021","L":"11/10/2021","MM-DD":"11-10"},"link":"2021/11/10/2021-11-10-React-Native运行原理","tags":["React-Native"],"updated":"2022-02-21T11:51:04.393Z","content":"<h1 id=\"参考\">参考<a title=\"#参考\" href=\"#参考\"></a></h1>\n<ul>\n<li><a href=\"https://idmrchan.com/2019/10/12/react-native-principle-01/\" target=\"_blank\">React-Native运行原理</a></li>\n</ul>\n<p><img src=\"https://formidable.com/uploads/new-5.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<blockquote>\n<p>这个 JSI 是由 C++ 实现的，可以认为 JSI 是一个简单版的 JS 引擎接口，同时连接 JS 和 Native，可以让 JS 保存对 c++ Host Object 的引用，也就是说不用将传递的消息序列化到 JSON，实现 JS 和 Native 的同步通信。</p>\n</blockquote>\n<p>也就是说JSI是一个连接JS和Native的引擎接口，<code>可以让 JS 保存对 c++ Host Object 的引用</code>就是可以保存C++的对象实例数据，所以实际上是JS和Objective-C++的通信。</p>\n<blockquote>\n<p>所以整个 RN 的执行流程就是：</p>\n</blockquote>\n<ul>\n<li>初始化：View/Bridge -&gt; 加载/执行 JSBundle -&gt; Bridge(JSI) -&gt; Native</li>\n<li>运行时：(e.g) 触摸屏幕 -&gt; Native EventListen -&gt; Bridge(JSI) -&gt; JS xxxx -&gt; Bridge(JSI) ……</li>\n</ul>\n<p>下面内容部分摘抄自参考文章里，主要从代码层面详解了初始化、运行时都做了什么事情，略过一些比较不重要的内容，主要核心提出个人对文章内容的理解以及重心。</p>\n<h1 id=\"初始化\">初始化<a title=\"#初始化\" href=\"#初始化\"></a></h1>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// AppDelegate.m</span><br><span class=\"line\">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];</span><br><span class=\"line\">  RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge</span><br><span class=\"line\">                                                   moduleName:@&quot;demo&quot;</span><br><span class=\"line\">                                            initialProperties:nil];</span><br><span class=\"line\"></span><br><span class=\"line\">  rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];</span><br><span class=\"line\"></span><br><span class=\"line\">  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];</span><br><span class=\"line\">  UIViewController *rootViewController = [UIViewController new];</span><br><span class=\"line\">  rootViewController.view = rootView;</span><br><span class=\"line\">  self.window.rootViewController = rootViewController;</span><br><span class=\"line\">  [self.window makeKeyAndVisible];</span><br><span class=\"line\">  return YES;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这部分初始化也是iOS AppDelegate的入口，RCTBridge的初始化以及RCTRootView的初始化，其他没有什么好说的。</p>\n<h1 id=\"rctbridge\">RCTBridge<a title=\"#rctbridge\" href=\"#rctbridge\"></a></h1>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7vh5z731jj30q80ggaah.jpg\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"setup\">Setup<a title=\"#setup\" href=\"#setup\"></a></h1>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"type\">void</span>)setUp</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  self.batchedBridge = [[[RCTCxxBridge class] alloc] initWithParentBridge:self];</span><br><span class=\"line\">  [self.batchedBridge start];</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"start\">Start<a title=\"#start\" href=\"#start\"></a></h1>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// RCTCxxBridge.mm</span><br><span class=\"line\">- (void)start</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  // 通知</span><br><span class=\"line\">  [[NSNotificationCenter defaultCenter]</span><br><span class=\"line\">    postNotificationName:RCTJavaScriptWillStartLoadingNotification</span><br><span class=\"line\">    object:_parentBridge userInfo:@&#123;@&quot;bridge&quot;: self&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">  // Set up the JS thread early</span><br><span class=\"line\">  // 开一个线程给 JS 使用</span><br><span class=\"line\">  _jsThread = [[NSThread alloc] initWithTarget:[self class]</span><br><span class=\"line\">                                      selector:@selector(runRunLoop)</span><br><span class=\"line\">                                        object:nil];</span><br><span class=\"line\">  _jsThread.name = @&quot;com.facebook.react.JavaScript&quot;;</span><br><span class=\"line\">  // 线程最高优先级，用于用户交互事件</span><br><span class=\"line\">  _jsThread.qualityOfService = NSQualityOfServiceUserInteractive;</span><br><span class=\"line\">  [_jsThread start];</span><br><span class=\"line\"></span><br><span class=\"line\">  dispatch_group_t prepareBridge = dispatch_group_create();</span><br><span class=\"line\"></span><br><span class=\"line\">  [_performanceLogger markStartForTag:RCTPLNativeModuleInit];</span><br><span class=\"line\"></span><br><span class=\"line\">  [self registerExtraModules];</span><br><span class=\"line\">  // Initialize all native modules that cannot be loaded lazily</span><br><span class=\"line\">  // 加载 JS 调用 Native 模块</span><br><span class=\"line\">  (void)[self _initializeModules:RCTGetModuleClasses() withDispatchGroup:prepareBridge lazilyDiscovered:NO];</span><br><span class=\"line\">  [self registerExtraLazyModules];</span><br><span class=\"line\"></span><br><span class=\"line\">  __weak RCTCxxBridge *weakSelf = self;</span><br><span class=\"line\"></span><br><span class=\"line\">  // Dispatch the instance initialization as soon as the initial module metadata has</span><br><span class=\"line\">  // been collected (see initModules)</span><br><span class=\"line\">  // 确定是否在 JS 线程，如果不是，指定在 JS 线程操作</span><br><span class=\"line\">  dispatch_group_enter(prepareBridge);</span><br><span class=\"line\">  [self ensureOnJavaScriptThread:^&#123;</span><br><span class=\"line\">    [weakSelf _initializeBridge:executorFactory];</span><br><span class=\"line\">    dispatch_group_leave(prepareBridge);</span><br><span class=\"line\">  &#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">  // Load the source asynchronously, then store it for later execution.</span><br><span class=\"line\">  // 加载资源</span><br><span class=\"line\">  dispatch_group_enter(prepareBridge);</span><br><span class=\"line\">  __block NSData *sourceCode;</span><br><span class=\"line\">  [self loadSource:^(NSError *error, RCTSource *source) &#123;</span><br><span class=\"line\">    if (error) &#123;</span><br><span class=\"line\">      [weakSelf handleError:error];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sourceCode = source.data;</span><br><span class=\"line\">    dispatch_group_leave(prepareBridge);</span><br><span class=\"line\">  &#125; onProgress:^(RCTLoadingProgress *progressData) &#123;&#125;];</span><br><span class=\"line\"></span><br><span class=\"line\">  // Wait for both the modules and source code to have finished loading</span><br><span class=\"line\">  // 加载完线程和 JS 模块，执行 JS</span><br><span class=\"line\">  dispatch_group_notify(prepareBridge, dispatch_get_global_queue(QOS_CLASS_USER_INTERACTIVE, 0), ^&#123;</span><br><span class=\"line\">    RCTCxxBridge *strongSelf = weakSelf;</span><br><span class=\"line\">    if (sourceCode &amp;&amp; strongSelf.loading) &#123;</span><br><span class=\"line\">      [strongSelf executeSourceCode:sourceCode sync:NO];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>文章中已经对代码增加了注释，这里在做一下总结：</p>\n<ol>\n<li>发出将要加载bridge事件的通知</li>\n<li>使用NSThread创建一个优先级最高的线程，提供给JS使用。</li>\n<li>registerExtraModules可以直接看下注释来理解，这个不是很重要，因为大部分情况下没有用到</li>\n<li>_initializeModules初始化JS调用的Native模块</li>\n<li>registerExtraLazyModules(Debug下调用，先忽略)</li>\n<li>ensureOnJavaScriptThread确认是否在JavaScript线程执行，如果不是就调到JavaScirpt的线程执行</li>\n<li>加载js</li>\n<li>所有都加载完毕后执行js</li>\n</ol>\n<p><strong>ensureOnJavaScriptThread与loadSource都会有一个dispatch_group_level的动作，当这两个都执行完dispatch_group_level之后就会执行dispatch_group_notify中的dispatch_block_t里面的函数</strong></p>\n<h3 id=\"registerextramodules\">registerExtraModules<a title=\"#registerextramodules\" href=\"#registerextramodules\"></a></h3>\n<blockquote>\n<p>/**</p>\n</blockquote>\n<ul>\n<li>The bridge initializes any registered RCTBridgeModules automatically, however</li>\n<li>if you wish to instantiate your own module instances, you can return them</li>\n<li>from this method.</li>\n<li></li>\n<li>Note: You should always return a new instance for each call, rather than</li>\n<li>returning the same instance each time the bridge is reloaded. Module instances</li>\n<li>should not be shared between bridges, and this may cause unexpected behavior.</li>\n<li></li>\n<li>It is also possible to override standard modules with your own implementations</li>\n<li>by returning a class with the same <code>moduleName</code> from this method, but this is</li>\n<li>not recommended in most cases - if the module methods and behavior do not</li>\n<li>match exactly, it may lead to bugs or crashes.<br>\n*/</li>\n</ul>\n<h1 id=\"执行js\">执行js<a title=\"#执行js\" href=\"#执行js\"></a></h1>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// JSIExecutor.cpp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">JSIExecutor::loadApplicationScript</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    std::unique_ptr&lt;<span class=\"type\">const</span> JSBigString&gt; script,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    std::string sourceURL)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">SystraceSection <span class=\"title\">s</span><span class=\"params\">(<span class=\"string\">&quot;JSIExecutor::loadApplicationScript&quot;</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  runtime_-&gt;<span class=\"built_in\">global</span>().<span class=\"built_in\">setProperty</span>(</span><br><span class=\"line\">      *runtime_,</span><br><span class=\"line\">      <span class=\"string\">&quot;nativeModuleProxy&quot;</span>,</span><br><span class=\"line\">      Object::<span class=\"built_in\">createFromHostObject</span>(</span><br><span class=\"line\">          *runtime_, std::<span class=\"built_in\">make_shared</span>&lt;NativeModuleProxy&gt;(*<span class=\"keyword\">this</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">  runtime_-&gt;<span class=\"built_in\">global</span>().<span class=\"built_in\">setProperty</span>(</span><br><span class=\"line\">      *runtime_,</span><br><span class=\"line\">      <span class=\"string\">&quot;nativeFlushQueueImmediate&quot;</span>,</span><br><span class=\"line\">      Function::<span class=\"built_in\">createFromHostFunction</span>(</span><br><span class=\"line\">          *runtime_,</span><br><span class=\"line\">          PropNameID::forAscii(*runtime_, <span class=\"string\">&quot;nativeFlushQueueImmediate&quot;</span>),</span><br><span class=\"line\">          <span class=\"number\">1</span>,</span><br><span class=\"line\">          [<span class=\"keyword\">this</span>](</span><br><span class=\"line\">              jsi::Runtime &amp;,</span><br><span class=\"line\">              <span class=\"type\">const</span> jsi::Value &amp;,</span><br><span class=\"line\">              <span class=\"type\">const</span> jsi::Value *args,</span><br><span class=\"line\">              <span class=\"type\">size_t</span> count) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">throw</span> std::<span class=\"built_in\">invalid_argument</span>(</span><br><span class=\"line\">                  <span class=\"string\">&quot;nativeFlushQueueImmediate arg count must be 1&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">callNativeModules</span>(args[<span class=\"number\">0</span>], <span class=\"literal\">false</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Value::<span class=\"built_in\">undefined</span>();</span><br><span class=\"line\">          &#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">  runtime_-&gt;<span class=\"built_in\">global</span>().<span class=\"built_in\">setProperty</span>(</span><br><span class=\"line\">      *runtime_,</span><br><span class=\"line\">      <span class=\"string\">&quot;nativeCallSyncHook&quot;</span>,</span><br><span class=\"line\">      Function::<span class=\"built_in\">createFromHostFunction</span>(</span><br><span class=\"line\">          *runtime_,</span><br><span class=\"line\">          PropNameID::forAscii(*runtime_, <span class=\"string\">&quot;nativeCallSyncHook&quot;</span>),</span><br><span class=\"line\">          <span class=\"number\">1</span>,</span><br><span class=\"line\">          [<span class=\"keyword\">this</span>](</span><br><span class=\"line\">              jsi::Runtime &amp;,</span><br><span class=\"line\">              <span class=\"type\">const</span> jsi::Value &amp;,</span><br><span class=\"line\">              <span class=\"type\">const</span> jsi::Value *args,</span><br><span class=\"line\">              <span class=\"type\">size_t</span> count) &#123; <span class=\"keyword\">return</span> <span class=\"built_in\">nativeCallSyncHook</span>(args, count); &#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (runtimeInstaller_) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">runtimeInstaller_</span>(*runtime_);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  runtime_-&gt;<span class=\"built_in\">evaluateJavaScript</span>(</span><br><span class=\"line\">      std::<span class=\"built_in\">make_unique</span>&lt;BigStringBuffer&gt;(std::<span class=\"built_in\">move</span>(script)), sourceURL);</span><br><span class=\"line\">  <span class=\"built_in\">flush</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote></blockquote>\n<ul>\n<li>runtime_-&gt;global().setProperty 是在 JS 全局对象 global 上注册 Function 或 Object</li>\n</ul>\n<blockquote></blockquote>\n<ul>\n<li>runtime_-&gt;evaluateJavaScript 则是调用了 iOS 内置的 JavaScript 引擎，解释执行 JS 代码。</li>\n</ul>\n<blockquote></blockquote>\n<ul>\n<li>而 runtime_ 是 JSI 的一个方法(?)，这里就和之前说的 执行 JS -&gt; Bridge(JSI) 连上了。</li>\n</ul>\n","prev":{"title":"JavaScript中柯里化（函数化编程）","link":"2021/11/11/2021-11-11-详解JavaScript柯里化（函数化编程）"},"next":{"title":"React-Redux原理详解","link":"2021/11/10/2021-11-10-React-Redux原理详解"},"plink":"http://hongweichen.github.io/2021/11/10/2021-11-10-React-Native运行原理/","toc":[{"id":"参考","title":"参考","index":"1"},{"id":"初始化","title":"初始化","index":"2"},{"id":"rctbridge","title":"RCTBridge","index":"3"},{"id":"setup","title":"Setup","index":"4"},{"id":"start","title":"Start","index":"5","children":[{"id":"registerextramodules","title":"registerExtraModules","index":"5.1"}]}],"reading_time":"1226 words in 8 min"}