{"title":"iOS中weak的底层原理","date":"2021-11-14T16:00:00.000Z","date_formatted":{"ll":"Nov 15, 2021","L":"11/15/2021","MM-DD":"11-15"},"link":"2021/11/15/iOS中weak的底层原理","tags":["Objective-C"],"updated":"2022-02-21T11:49:33.317Z","content":"<h1 id=\"前言\">前言<a title=\"#前言\" href=\"#前言\"></a></h1>\n<p>刚写过Swift中的内存管理，写到了weak和unowned，所以接下来想写一写iOS中weak的底层原理</p>\n<h1 id=\"weak底层实现代码\">weak底层实现代码<a title=\"#weak底层实现代码\" href=\"#weak底层实现代码\"></a></h1>\n<h1 id=\"objc_initweak\">objc_initWeak<a title=\"#objc_initweak\" href=\"#objc_initweak\"></a></h1>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id</span><br><span class=\"line\">objc_initWeak(id *location, id newObj)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    // 如果newObject不存在 则设置weak指针为nil</span><br><span class=\"line\">    if (!newObj) &#123;</span><br><span class=\"line\">        *location = nil;</span><br><span class=\"line\">        return nil;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 具体实现</span><br><span class=\"line\">    return storeWeak&lt;DontHaveOld, DoHaveNew, DoCrashIfDeallocating&gt;</span><br><span class=\"line\">        (location, (objc_object*)newObj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>objc_initWeak方法只是一个入口，具体实现方法都在storeWeak当中，在weak第一次初始化时，会调用objc_initWeak方法</p>\n<h1 id=\"objc_storeweak\">objc_storeWeak<a title=\"#objc_storeweak\" href=\"#objc_storeweak\"></a></h1>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * This function stores a new value into a __weak variable. It would</span><br><span class=\"line\"> * be used anywhere a __weak variable is the target of an assignment.</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @param location The address of the weak pointer itself</span><br><span class=\"line\"> * @param newObj The new object this weak ptr should now point to</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @return \\e newObj</span><br><span class=\"line\"> */</span><br><span class=\"line\">id</span><br><span class=\"line\">objc_storeWeak(id *location, id newObj)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return storeWeak&lt;DoHaveOld, DoHaveNew, DoCrashIfDeallocating&gt;</span><br><span class=\"line\">        (location, (objc_object *)newObj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当weak已初始化后，再更新weak值，则调用objc_storeWeak的方法</p>\n<h1 id=\"storeweak\">storeWeak<a title=\"#storeweak\" href=\"#storeweak\"></a></h1>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/// 是否产生Crash</span><br><span class=\"line\">enum CrashIfDeallocating &#123;</span><br><span class=\"line\">    DontCrashIfDeallocating = false, DoCrashIfDeallocating = true</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">/// 是否有旧值，是否有新值，模板传值</span><br><span class=\"line\">/// location是weak指针地址，newObj是新的指针地址</span><br><span class=\"line\">template &lt;HaveOld haveOld, HaveNew haveNew,</span><br><span class=\"line\">          enum CrashIfDeallocating crashIfDeallocating&gt;</span><br><span class=\"line\">static id</span><br><span class=\"line\">storeWeak(id *location, objc_object *newObj)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    // 前面基本是对传入值异常的判断 略过</span><br><span class=\"line\">    ASSERT(haveOld  ||  haveNew);</span><br><span class=\"line\">    if (!haveNew) ASSERT(newObj == nil);</span><br><span class=\"line\"></span><br><span class=\"line\">    Class previouslyInitializedClass = nil;</span><br><span class=\"line\">    id oldObj;</span><br><span class=\"line\">    SideTable *oldTable;</span><br><span class=\"line\">    SideTable *newTable;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Acquire locks for old and new values.</span><br><span class=\"line\">    // Order by lock address to prevent lock ordering problems.</span><br><span class=\"line\">    // Retry if the old value changes underneath us.</span><br><span class=\"line\">    // retry是一个goto函数</span><br><span class=\"line\"> retry:</span><br><span class=\"line\">    // 如果有旧的值，将指针地址给到oldObj</span><br><span class=\"line\">    // 根据oldObj取到SideTables中对应的SideTable，SideTables是一个全局的数据</span><br><span class=\"line\">    // 没有旧的值则将oldTable设置为nil</span><br><span class=\"line\">    if (haveOld) &#123;</span><br><span class=\"line\">        oldObj = *location;</span><br><span class=\"line\">        oldTable = &amp;SideTables()[oldObj];</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        oldTable = nil;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 如果有新的值，则尝试从SideTables中根据newObj取到SideTable</span><br><span class=\"line\">    // 预防SideTable已经存在的情况</span><br><span class=\"line\">    if (haveNew) &#123;</span><br><span class=\"line\">        newTable = &amp;SideTables()[newObj];</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        newTable = nil;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 给oldTable和newTable上锁，避免资源竞争</span><br><span class=\"line\">    SideTable::lockTwo&lt;haveOld, haveNew&gt;(oldTable, newTable);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 如果有旧的值 但是location不等于oldObj，则解锁重新执行retry（可能被其他线程又修改了weak的值）</span><br><span class=\"line\">    if (haveOld  &amp;&amp;  *location != oldObj) &#123;</span><br><span class=\"line\">        SideTable::unlockTwo&lt;haveOld, haveNew&gt;(oldTable, newTable);</span><br><span class=\"line\">        goto retry;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Prevent a deadlock between the weak reference machinery</span><br><span class=\"line\">    // and the +initialize machinery by ensuring that no</span><br><span class=\"line\">    // weakly-referenced object has an un-+initialized isa.</span><br><span class=\"line\">    if (haveNew  &amp;&amp;  newObj) &#123;</span><br><span class=\"line\">        Class cls = newObj-&gt;getIsa();</span><br><span class=\"line\">        // 初始化previouslyInitializedClass再设置weak</span><br><span class=\"line\">        if (cls != previouslyInitializedClass  &amp;&amp;  </span><br><span class=\"line\">            !((objc_class *)cls)-&gt;isInitialized())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            // 防止死锁 unlock</span><br><span class=\"line\">            SideTable::unlockTwo&lt;haveOld, haveNew&gt;(oldTable, newTable);</span><br><span class=\"line\">            class_initialize(cls, (id)newObj);</span><br><span class=\"line\"></span><br><span class=\"line\">            // If this class is finished with +initialize then we&#x27;re good.</span><br><span class=\"line\">            // If this class is still running +initialize on this thread</span><br><span class=\"line\">            // (i.e. +initialize called storeWeak on an instance of itself)</span><br><span class=\"line\">            // then we may proceed but it will appear initializing and</span><br><span class=\"line\">            // not yet initialized to the check above.</span><br><span class=\"line\">            // Instead set previouslyInitializedClass to recognize it on retry.</span><br><span class=\"line\">            previouslyInitializedClass = cls;</span><br><span class=\"line\"></span><br><span class=\"line\">            goto retry;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Clean up old value, if any.</span><br><span class=\"line\">    // 移除旧的值 如果有</span><br><span class=\"line\">    if (haveOld) &#123;</span><br><span class=\"line\">        weak_unregister_no_lock(&amp;oldTable-&gt;weak_table, oldObj, location);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Assign new value, if any.</span><br><span class=\"line\">    // 设置新的值，如果有</span><br><span class=\"line\">    if (haveNew) &#123;</span><br><span class=\"line\">        newObj = (objc_object *)</span><br><span class=\"line\">            weak_register_no_lock(&amp;newTable-&gt;weak_table, (id)newObj, location,</span><br><span class=\"line\">                                  crashIfDeallocating ? CrashIfDeallocating : ReturnNilIfDeallocating);</span><br><span class=\"line\">        // weak_register_no_lock returns nil if weak store should be rejected</span><br><span class=\"line\"></span><br><span class=\"line\">        // Set is-weakly-referenced bit in refcount table.</span><br><span class=\"line\">        if (!newObj-&gt;isTaggedPointerOrNil()) &#123;</span><br><span class=\"line\">            newObj-&gt;setWeaklyReferenced_nolock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Do not set *location anywhere else. That would introduce a race.</span><br><span class=\"line\">        *location = (id)newObj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else &#123;</span><br><span class=\"line\">        // No new value. The storage is not changed.</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 完成 解锁</span><br><span class=\"line\">    SideTable::unlockTwo&lt;haveOld, haveNew&gt;(oldTable, newTable);</span><br><span class=\"line\"></span><br><span class=\"line\">    // This must be called without the locks held, as it can invoke</span><br><span class=\"line\">    // arbitrary code. In particular, even if _setWeaklyReferenced</span><br><span class=\"line\">    // is not implemented, resolveInstanceMethod: may be, and may</span><br><span class=\"line\">    // call back into the weak reference machinery.</span><br><span class=\"line\">    // 调用obj上的_setWeaklyReferenced方法</span><br><span class=\"line\">    callSetWeaklyReferenced((id)newObj);</span><br><span class=\"line\"></span><br><span class=\"line\">    return (id)newObj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>storeWeak接收了5个参数，是否有旧值，是否有新值，如果weak正在析构时是否产生崩溃</li>\n<li>如果haveOld是为true，则将location的值丢给oldObj，然后使用oldObj来从&amp;SideTables中取值，给oldTable赋值</li>\n<li>使用newObj从&amp;SideTables中取值，给newTable赋值</li>\n<li>给oldTable和newTable上锁，避免资源竞争</li>\n<li>判断oldObj是否等于location，如果不相等，则解锁后重新执行retry方法，因为可能在其他线程修改了weak的值</li>\n<li>判断previouslyInitializedClass是否初始化，如果没有初始化，则初始化previouslyInitializedClass</li>\n<li>调用weak_unregister_no_lock移除旧的值</li>\n<li>调用weak_register_no_lock注册新的值，并且改变location的值为newObj</li>\n<li>完成后解锁</li>\n<li>调用newObj的_setWeaklyReferenced方法</li>\n<li>返回新的值</li>\n</ol>\n<h1 id=\"参考\">参考<a title=\"#参考\" href=\"#参考\"></a></h1>\n<ul>\n<li><a href=\"https://juejin.cn/post/6844904101839372295\" target=\"_blank\">iOS底层原理：weak的实现原理</a></li>\n</ul>\n","prev":{"title":"MRC下retain所影响retainCount的变化","link":"2021/11/15/MRC下retain所影响retainCount的变化"},"next":{"title":"React-Native 原生通信","link":"2021/11/15/React-Native 原生通信"},"plink":"http://hongweichen.github.io/2021/11/15/iOS中weak的底层原理/","toc":[{"id":"前言","title":"前言","index":"1"},{"id":"weak底层实现代码","title":"weak底层实现代码","index":"2"},{"id":"objc_initweak","title":"objc_initWeak","index":"3"},{"id":"objc_storeweak","title":"objc_storeWeak","index":"4"},{"id":"storeweak","title":"storeWeak","index":"5"},{"id":"参考","title":"参考","index":"6"}],"reading_time":"1096 words in 7 min"}