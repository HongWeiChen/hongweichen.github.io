{"title":"React-Redux原理详解","date":"2021-11-09T16:00:00.000Z","date_formatted":{"ll":"Nov 10, 2021","L":"11/10/2021","MM-DD":"11-10"},"link":"2021/11/10/2021-11-10-React-Redux原理详解","tags":["React-Native"],"updated":"2022-02-21T11:50:45.822Z","content":"<h1 id=\"前言\">前言<a title=\"#前言\" href=\"#前言\"></a></h1>\n<p>之前遇到一个问题，在解决多个页面同时刷新数据时，Emitter太过于麻烦，代码也比较繁琐。一翻查阅之后，找到React-Redux框架，可以解决数据同时刷新的问题，也可以提高访问速度，还可以将部分逻辑进行拆分，带来的好处很多。</p>\n<p>在使用React-Redux开发了一阵子后，也享受到了React-Redux带来的好处，参考网上一些资料写一遍React-Redux原理详解吧，加深一下自己对React-Redux的印象。</p>\n<h1 id=\"redux设计理念\">Redux设计理念<a title=\"#redux设计理念\" href=\"#redux设计理念\"></a></h1>\n<p>Redux是将整个应用状态存储到一个地方上称之为store，里面保存着一个状态树store tree，组件可以派发(dispatch)行为(action)给store，而不是直接通知其他组件，组件内部通过订阅store中的状态state来刷新自己的视图</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/6548744-df461a22f59ef7da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"redux三大原则\">Redux三大原则<a title=\"#redux三大原则\" href=\"#redux三大原则\"></a></h1>\n<ul>\n<li><a href=\"#%E5%94%AF%E4%B8%80%E6%95%B0%E6%8D%AE%E6%BA%90\">唯一数据源</a></li>\n<li><a href=\"#%E4%BF%9D%E6%8C%81%E5%8F%AA%E8%AF%BB%E6%80%A7\">保持只读状态</a></li>\n<li><a href=\"#%E6%95%B0%E6%8D%AE%E6%94%B9%E5%8F%98%E5%8F%AA%E8%83%BD%E9%80%9A%E8%BF%87%E7%BA%AF%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C\">数据改变只能通过纯函数执行</a></li>\n</ul>\n<h1 id=\"唯一数据源\">唯一数据源<a title=\"#唯一数据源\" href=\"#唯一数据源\"></a></h1>\n<p>整个应用的state都被存储到一个状态树里面，并且这个状态树，只存在于唯一的store中。</p>\n<h1 id=\"保持只读性\">保持只读性<a title=\"#保持只读性\" href=\"#保持只读性\"></a></h1>\n<p>state是只读的，唯一可以改变state的方式只能通过action，action是一个用于描述以发生时间的普通对象。</p>\n<h1 id=\"数据改变只能通过纯函数执行\">数据改变只能通过纯函数执行<a title=\"#数据改变只能通过纯函数执行\" href=\"#数据改变只能通过纯函数执行\"></a></h1>\n<p>使用纯函数来执行修改，为了描述action是如何改变state的，只需要编写reducer</p>\n<h1 id=\"redux概念解析\">Redux概念解析<a title=\"#redux概念解析\" href=\"#redux概念解析\"></a></h1>\n<h1 id=\"store\">Store<a title=\"#store\" href=\"#store\"></a></h1>\n<ul>\n<li>store就是保存数据的地方，整个应用只能有一个store</li>\n<li>redux提供createStore来生成store</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;createStore&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;redux&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> store=<span class=\"title function_\">createStore</span>(fn);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"state\">State<a title=\"#state\" href=\"#state\"></a></h1>\n<p>state就是store里面的数据，store里可以有多个state，Redux规定一个state对应一个View，只要View相同，state就相同，反过来也一样，可以通过store.getState()来获取state</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;createStore&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;redux&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> store=<span class=\"title function_\">createStore</span>(fn);</span><br><span class=\"line\"><span class=\"keyword\">const</span> state=store.<span class=\"title function_\">getState</span>()</span><br></pre></td></tr></table></figure>\n<h1 id=\"action\">Action<a title=\"#action\" href=\"#action\"></a></h1>\n<p>state的改变会导致View的变化，但是在redux中不能直接操作state，也就是说不能使用this.setState来操作，用户只能操作到View。Redux提供了一个对象来告诉Store需要改变state。Action是一个对象其中type属性是必须的，表示Action名称，其他可以根据需求自由设置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> action=&#123;</span><br><span class=\"line\">  <span class=\"attr\">type</span>:<span class=\"string\">&#x27;ADD_TODO&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">payload</span>:<span class=\"string\">&#x27;redux原理&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"store.dispatch()\">store.dispatch()<a title=\"#store.dispatch()\" href=\"#store.dispatch()\"></a></h3>\n<p>store.dispatch是唯一View发出Action的方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.<span class=\"title function_\">dispatch</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">type</span>:<span class=\"string\">&#x27;ADD_TODO&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">payload</span>:<span class=\"string\">&#x27;redux原理&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>store接收一个action作为参数，将它发送给store通知store改变state。</p>\n<h1 id=\"reducer\">Reducer<a title=\"#reducer\" href=\"#reducer\"></a></h1>\n<p>Store收到Action后，必须给出新的state，这样View才会变化。这种state的计算过程就叫做Reducer。</p>\n<p>reducer是一个纯函数，也就是说函数的返回结果必须由参数state和action决定，而且不能产生任何副作用也不能修改state和aciton对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">reducer</span> =(<span class=\"params\">state,action</span>)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span>(action.<span class=\"property\">type</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"attr\">ADD_TODO</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newstate;</span><br><span class=\"line\">    <span class=\"keyword\">default</span> <span class=\"keyword\">return</span> state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考\">参考<a title=\"#参考\" href=\"#参考\"></a></h1>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/e984206553c2\" target=\"_blank\">简书</a></li>\n</ul>\n","prev":{"title":"React-Native运行原理","link":"2021/11/10/2021-11-10-React-Native运行原理"},"next":{"title":"关于NSString的内存地址","link":"2021/11/09/2021-11-09-关于NSString的内存地址"},"plink":"http://hongweichen.github.io/2021/11/10/2021-11-10-React-Redux原理详解/","toc":[{"id":"前言","title":"前言","index":"1"},{"id":"redux设计理念","title":"Redux设计理念","index":"2"},{"id":"redux三大原则","title":"Redux三大原则","index":"3"},{"id":"唯一数据源","title":"唯一数据源","index":"4"},{"id":"保持只读性","title":"保持只读性","index":"5"},{"id":"数据改变只能通过纯函数执行","title":"数据改变只能通过纯函数执行","index":"6"},{"id":"redux概念解析","title":"Redux概念解析","index":"7"},{"id":"store","title":"Store","index":"8"},{"id":"state","title":"State","index":"9"},{"id":"action","title":"Action","index":"10","children":[{"id":"store.dispatch()","title":"store.dispatch()","index":"10.1"}]}],"reading_time":"770 words in 5 min"}