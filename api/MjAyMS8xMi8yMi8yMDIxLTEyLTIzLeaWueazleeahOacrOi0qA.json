{"title":"方法的本质","date":"2021-12-21T16:00:00.000Z","date_formatted":{"ll":"Dec 22, 2021","L":"12/22/2021","MM-DD":"12-22"},"author":"HongWeiChen","link":"2021/12/22/2021-12-23-方法的本质","tags":["原创"],"updated":"2021-12-23T07:49:20.000Z","content":"<h1 id=\"方法的本质是什么\">方法的本质是什么<a title=\"#方法的本质是什么\" href=\"#方法的本质是什么\"></a></h1>\n<p>方法的本质是消息，底层使用objc_msgSend，objc_msgSend有两个参数，方法接受者和方法的主体。当我们调用一个方法时，objc_msgSend会先从cacht_t缓存列表中查找到对应的bucket，然后从bucket中取到sel和imp，sel是方法编号，imp是函数指针地址，从缓存中获取对应的bucket是汇编层面的快速查找。若快速查找找不到对应的方法，则开始执行慢速查找，也就是遍历查找，遍历自身的方法列表method_list，若找不到再去父类寻找，最终一直到NSObject若一直都找不到的话，因为iOS有多态的特性，还会从分类中的方法开始查找。还是没有找到对应的方法就只能进入消息转发的方法中，消息转发也分为快速转发和慢速转发，forwardingTargetForSelector和methodSignatureForSelector，这两个方法顺序执行，如果还是没有发现可以补救的方法就会出现崩溃异常程序退出。</p>\n<h1 id=\"避免方法转发失败产生崩溃的方法\">避免方法转发失败产生崩溃的方法<a title=\"#避免方法转发失败产生崩溃的方法\" href=\"#避免方法转发失败产生崩溃的方法\"></a></h1>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (BOOL)resolveInstanceMethod:(SEL)sel &#123;</span><br><span class=\"line\">    Method method = class_getInstanceMethod(self, @selector(catchException));</span><br><span class=\"line\">    IMP imp = method_getImplementation(method);</span><br><span class=\"line\">    const char *type = method_getTypeEncoding(method);</span><br><span class=\"line\">    bool isSuccess = class_addMethod(self, sel, imp, type);</span><br><span class=\"line\">    return isSuccess;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在resolveInstanceMethod中编写补救方法，抓取崩溃信息并且上传到服务器后台。也可以在forwardingTargetForSelector中编写，只是forwardingTargetForSelector转发的对象一定需要含有aSelector的方法，所以不建议使用。</p>\n<p><strong>缓存列表结构：bucket -&gt; {imp, sel} = cache_t[key]</strong></p>\n","prev":{"title":"swift中struct和class的区别","link":"2021/12/22/2021-12-22-struct和class的区别"},"next":{"title":"类的本质","link":"2021/12/22/类的本质"},"plink":"http://hongweichen.github.io/2021/12/22/2021-12-23-方法的本质/","toc":[{"id":"方法的本质是什么","title":"方法的本质是什么","index":"1"},{"id":"避免方法转发失败产生崩溃的方法","title":"避免方法转发失败产生崩溃的方法","index":"2"}],"reading_time":"393 words in 3 min"}