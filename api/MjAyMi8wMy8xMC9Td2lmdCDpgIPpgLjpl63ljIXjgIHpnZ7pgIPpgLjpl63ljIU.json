{"title":"Swift 逃逸闭包、非逃逸闭包","date":"2022-03-09T16:00:00.000Z","date_formatted":{"ll":"Mar 10, 2022","L":"03/10/2022","MM-DD":"03-10"},"link":"2022/03/10/Swift 逃逸闭包、非逃逸闭包","tags":["Swift"],"updated":"2022-03-10T12:31:07.246Z","content":"<h1 id=\"逃逸闭包与非逃逸闭包\">逃逸闭包与非逃逸闭包<a title=\"#逃逸闭包与非逃逸闭包\" href=\"#逃逸闭包与非逃逸闭包\"></a></h1>\n<p>一个接受闭包作为参数的函数，该闭包可能在函数返回后才被调用，也就是说这个闭包逃离了该函数的作用域，这种闭包称为逃逸闭包。当你声明一个接受闭包作为参数的函数时，你可以在形式参数前写<code>@escaping</code>来明确逃逸闭包是允许逃逸。而非逃逸闭包作为参数的函数时，在函数返回之前调用该闭包。</p>\n<h1 id=\"逃逸闭包生命周期和需要注意的点\">逃逸闭包生命周期和需要注意的点<a title=\"#逃逸闭包生命周期和需要注意的点\" href=\"#逃逸闭包生命周期和需要注意的点\"></a></h1>\n<p>逃逸闭包示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func requestData(block: @escaping () -&gt; Void) &#123;</span><br><span class=\"line\">  DispatchQueue.global().async &#123;</span><br><span class=\"line\">    DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 2.0, execute: &#123;</span><br><span class=\"line\">        block()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>逃逸闭包的生命周期相比非逃逸闭包的生命周期会延长</li>\n<li>逃逸闭包不能捕获inout参数</li>\n<li>调用闭包时是否有nil对象或野指针对象</li>\n</ol>\n<h5 id=\"inout\"><code>inout</code><a title=\"#inout\" href=\"#inout\"></a></h5>\n<p>函数中传入的参数只需对参数进行修改，使用inout进行表示，调用函数需要添加&amp;：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func swap(_ a: inout Int, _ b: inout Int) &#123;</span><br><span class=\"line\">  let tmp = a</span><br><span class=\"line\">  a = b</span><br><span class=\"line\">  b = tmp</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">swap(&amp;num1, &amp;num2)</span><br></pre></td></tr></table></figure>\n<p>输出结果是num1和num2的数据交换。</p>\n","prev":{"title":"UIView与CALayer的关系","link":"2022/03/10/UIView与CALayer的关系"},"next":{"title":"Objective-C 内存管理","link":"2022/03/05/Objective-C 内存管理"},"plink":"http://hongweichen.github.io/2022/03/10/Swift 逃逸闭包、非逃逸闭包/","toc":[{"id":"逃逸闭包与非逃逸闭包","title":"逃逸闭包与非逃逸闭包","index":"1"},{"id":"逃逸闭包生命周期和需要注意的点","title":"逃逸闭包生命周期和需要注意的点","index":"2"}],"reading_time":"307 words in 2 min"}