{"title":"React-Native 原生通信","date":"2021-11-14T16:00:00.000Z","date_formatted":{"ll":"Nov 15, 2021","L":"11/15/2021","MM-DD":"11-15"},"link":"2021/11/15/React-Native 原生通信","tags":["React-Native"],"updated":"2022-03-05T07:30:23.008Z","content":"<h1 id=\"参考\">参考<a title=\"#参考\" href=\"#参考\"></a></h1>\n<ul>\n<li><a href=\"https://idmrchan.com/2019/10/14/react-native-principle-02/\" target=\"_blank\">Native和RN通信</a></li>\n<li><a href=\"https://formidable.com/blog/2019/jsi-jsc-part-2/\" target=\"_blank\">The New React Native Architecture Explained: Part Two</a></li>\n</ul>\n<h1 id=\"rct_export_module/rct_export_method\">RCT_EXPORT_MODULE/RCT_EXPORT_METHOD<a title=\"#rct_export_module/rct_export_method\" href=\"#rct_export_module/rct_export_method\"></a></h1>\n<p>因为我个人从事主要还是原生端的偏多，我先从原生端的这两个比较重要的方法开始讲起</p>\n<h1 id=\"rct_export_module\">RCT_EXPORT_MODULE<a title=\"#rct_export_module\" href=\"#rct_export_module\"></a></h1>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define RCT_EXPORT_MODULE(js_name) \\</span><br><span class=\"line\">RCT_EXTERN void RCTRegisterModule(Class); \\</span><br><span class=\"line\">+ (NSString *)moduleName &#123; return @#js_name; &#125; \\</span><br><span class=\"line\">+ (void)load &#123; RCTRegisterModule(self); &#125;</span><br></pre></td></tr></table></figure>\n<p>RCT_EXPORT_MODULE代表了两个方法</p>\n<ul>\n<li>moduleName</li>\n<li>load</li>\n</ul>\n<h1 id=\"modulename\">moduleName<a title=\"#modulename\" href=\"#modulename\"></a></h1>\n<p>用于获取类名称</p>\n<h1 id=\"load\">load<a title=\"#load\" href=\"#load\"></a></h1>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void RCTRegisterModule(Class moduleClass)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  static dispatch_once_t onceToken;</span><br><span class=\"line\">  dispatch_once(&amp;onceToken, ^&#123;</span><br><span class=\"line\">    RCTModuleClasses = [NSMutableArray new];</span><br><span class=\"line\">    RCTModuleClassesSyncQueue = dispatch_queue_create(&quot;com.facebook.react.ModuleClassesSyncQueue&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  RCTAssert([moduleClass conformsToProtocol:@protocol(RCTBridgeModule)],</span><br><span class=\"line\">            @&quot;%@ does not conform to the RCTBridgeModule protocol&quot;,</span><br><span class=\"line\">            moduleClass);</span><br><span class=\"line\"></span><br><span class=\"line\">  // Register module</span><br><span class=\"line\">  dispatch_barrier_async(RCTModuleClassesSyncQueue, ^&#123;</span><br><span class=\"line\">    [RCTModuleClasses addObject:moduleClass];</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>RCTRegisterModule则是将模块的Class进行存储到一个数组中。</p>\n<p><strong>补充一点：load是系统方法，是在pre-main的时候运行的，在对RCTBridge进行初始化时，就已经将所有Module类名进行存储</strong></p>\n<h1 id=\"rct_export_method\">RCT_EXPORT_METHOD<a title=\"#rct_export_method\" href=\"#rct_export_method\"></a></h1>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define _RCT_EXTERN_REMAP_METHOD(js_name, method, is_blocking_synchronous_method) \\</span><br><span class=\"line\">  + (const RCTMethodInfo *)RCT_CONCAT(__rct_export__, RCT_CONCAT(js_name, RCT_CONCAT(__LINE__, __COUNTER__))) &#123; \\</span><br><span class=\"line\">    static RCTMethodInfo config = &#123;#js_name, #method, is_blocking_synchronous_method&#125;; \\</span><br><span class=\"line\">    return &amp;config; \\</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>RCT_EXPORT_METHOD是一个嵌套宏，最终执行的宏函数是_RCT_EXTERN_REMAP_METHOD，其实就是返回一个RCTMethodInfo的结构体，返回结构体的地址。</p>\n<blockquote>\n<p>RN 提供了<code>RCT_EXPORT_MODULE</code>和<code>RCT_EXPORT_METHOD</code>两个宏，用于暴露模块方法，模块名默认是方法类名。</p>\n</blockquote>\n<p><a href=\"https://reactnative.dev/docs/native-modules-ios\" target=\"_blank\">官方文档</a></p>\n<h1 id=\"实现原理\">实现原理<a title=\"#实现原理\" href=\"#实现原理\"></a></h1>\n<p><strong>JS方面部分内容摘自参考文章</strong></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/006y8mN6gy1g7xskerihoj30sx0moq3n.jpg\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.bundle.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">NativeModules</span> = <span class=\"title function_\">_$$_REQUIRE</span>(_dependencyMap[<span class=\"number\">0</span>], <span class=\"string\">&quot;../../BatchedBridge/NativeModules&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// BatchedBridge/NativeModules.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">NativeModules</span>: &#123;[<span class=\"attr\">moduleName</span>: string]: <span class=\"title class_\">Object</span>&#125; = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable language_\">global</span>.<span class=\"property\">nativeModuleProxy</span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">NativeModules</span> = <span class=\"variable language_\">global</span>.<span class=\"property\">nativeModuleProxy</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!<span class=\"variable language_\">global</span>.<span class=\"property\">nativeExtensions</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...从其他人写的文章来看，之前的版本和 Debug JS Remote 走这里</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>之前说到 JS 调用 Native，实际调用的是 NativeModules。这个 global.nativeModuleProxy 是 Native 注册的方法，可以翻回 ReactNative运行原理执行 JS 这段。</p>\n</blockquote>\n<p><a href=\"https://hongweichen.github.io/2021/11/10/React-Native%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/\" target=\"_blank\">React-Native运行原理</a></p>\n<p>有个疑问：所以其实NativeModules等价于global.nativeModuleProxy?直接用global.nativeModuleProxy调用等价于NativeModules调用？</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// JSINativeModules.cpp</span></span><br><span class=\"line\"><span class=\"function\">folly::Optional&lt;Object&gt; <span class=\"title\">JSINativeModules::createModule</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    Runtime&amp; rt,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"type\">const</span> std::string&amp; name)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!m_genNativeModuleJS) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用 global.__fbGenNativeModule，该方法在 NativeModule.js 实现</span></span><br><span class=\"line\">    m_genNativeModuleJS =</span><br><span class=\"line\">        rt.<span class=\"built_in\">global</span>().<span class=\"built_in\">getPropertyAsFunction</span>(rt, <span class=\"string\">&quot;__fbGenNativeModule&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">auto</span> result = m_moduleRegistry-&gt;<span class=\"built_in\">getConfig</span>(name);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!result.<span class=\"built_in\">hasValue</span>()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> folly::none;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Value moduleInfo = m_genNativeModuleJS-&gt;<span class=\"built_in\">call</span>(</span><br><span class=\"line\">      rt,</span><br><span class=\"line\">      <span class=\"built_in\">valueFromDynamic</span>(rt, result-&gt;config),</span><br><span class=\"line\">      <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">double</span>&gt;(result-&gt;index));</span><br><span class=\"line\">  <span class=\"built_in\">CHECK</span>(!moduleInfo.<span class=\"built_in\">isNull</span>()) &lt;&lt; <span class=\"string\">&quot;Module returned from genNativeModule is null&quot;</span>;</span><br><span class=\"line\">  <span class=\"function\">folly::Optional&lt;Object&gt; <span class=\"title\">module</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">      moduleInfo.asObject(rt).getPropertyAsObject(rt, <span class=\"string\">&quot;module&quot;</span>))</span></span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">module</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// NativeModule.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// export this method as a global so we can call it from native</span></span><br><span class=\"line\"><span class=\"variable language_\">global</span>.<span class=\"property\">__fbGenNativeModule</span> = genModule;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">genModule</span>(<span class=\"params\">config, moduleID</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [moduleName, constants, methods, promiseMethods, syncMethods] = config;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"variable language_\">module</span> = &#123;&#125;;</span><br><span class=\"line\">  methods &amp;&amp;</span><br><span class=\"line\">    methods.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">methodName, methodID</span>) =&gt;</span> &#123;</span><br><span class=\"line\">     \t<span class=\"comment\">// ...</span></span><br><span class=\"line\">      <span class=\"variable language_\">module</span>[methodName] = <span class=\"title function_\">genMethod</span>(moduleID, methodID, methodType);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(<span class=\"variable language_\">module</span>, constants);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;<span class=\"attr\">name</span>: moduleName, <span class=\"variable language_\">module</span>&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">genMethod</span>(<span class=\"params\">moduleID: number, methodID: number, type: MethodType</span>) &#123;</span><br><span class=\"line\">  fn = <span class=\"keyword\">function</span>(<span class=\"params\">...args: <span class=\"built_in\">Array</span>&lt;any&gt;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title class_\">BatchedBridge</span>.<span class=\"title function_\">enqueueNativeCall</span>(</span><br><span class=\"line\">        moduleID,</span><br><span class=\"line\">        methodID,</span><br><span class=\"line\">        args,</span><br><span class=\"line\">        <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> <span class=\"title function_\">resolve</span>(data),</span><br><span class=\"line\">        <span class=\"function\"><span class=\"params\">errorData</span> =&gt;</span> <span class=\"title function_\">reject</span>(<span class=\"title function_\">createErrorFromErrorData</span>(errorData)),</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  fn.<span class=\"property\">type</span> = type;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fn;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">enqueueNativeCall</span>(<span class=\"params\">moduleID, methodID, params, onFail, onSucc</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">processCallbacks</span>(moduleID, methodID, params, onFail, onSucc);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>[<span class=\"variable constant_\">MODULE_IDS</span>].<span class=\"title function_\">push</span>(moduleID);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>[<span class=\"variable constant_\">METHOD_IDS</span>].<span class=\"title function_\">push</span>(methodID);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>[<span class=\"variable constant_\">PARAMS</span>].<span class=\"title function_\">push</span>(params);</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> now = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    <span class=\"variable language_\">global</span>.<span class=\"property\">nativeFlushQueueImmediate</span> &amp;&amp;</span><br><span class=\"line\">    now - <span class=\"variable language_\">this</span>.<span class=\"property\">_lastFlush</span> &gt;= <span class=\"variable constant_\">MIN_TIME_BETWEEN_FLUSHES_MS</span>\t<span class=\"comment\">// MIN_TIME_BETWEEN_FLUSHES_MS = 5</span></span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> queue = <span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_queue</span> = [[], [], [], <span class=\"variable language_\">this</span>.<span class=\"property\">_callID</span>];</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_lastFlush</span> = now;</span><br><span class=\"line\">    <span class=\"variable language_\">global</span>.<span class=\"title function_\">nativeFlushQueueImmediate</span>(queue);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// JSIExecutor.cpp</span></span><br><span class=\"line\">runtime_-&gt;<span class=\"built_in\">global</span>().<span class=\"built_in\">setProperty</span>(</span><br><span class=\"line\">  *runtime_,</span><br><span class=\"line\">  <span class=\"string\">&quot;nativeFlushQueueImmediate&quot;</span>,</span><br><span class=\"line\">  Function::<span class=\"built_in\">createFromHostFunction</span>(</span><br><span class=\"line\">      *runtime_,</span><br><span class=\"line\">      PropNameID::forAscii(*runtime_, <span class=\"string\">&quot;nativeFlushQueueImmediate&quot;</span>),</span><br><span class=\"line\">      <span class=\"number\">1</span>,</span><br><span class=\"line\">      [<span class=\"keyword\">this</span>](</span><br><span class=\"line\">          jsi::Runtime &amp;,</span><br><span class=\"line\">          <span class=\"type\">const</span> jsi::Value &amp;,</span><br><span class=\"line\">          <span class=\"type\">const</span> jsi::Value *args,</span><br><span class=\"line\">          <span class=\"type\">size_t</span> count) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> std::<span class=\"built_in\">invalid_argument</span>(</span><br><span class=\"line\">              <span class=\"string\">&quot;nativeFlushQueueImmediate arg count must be 1&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">callNativeModules</span>(args[<span class=\"number\">0</span>], <span class=\"literal\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Value::<span class=\"built_in\">undefined</span>();</span><br><span class=\"line\">      &#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NativeToJsBridge.cpp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">callNativeModules</span><span class=\"params\">( __unused JSExecutor&amp; executor, folly::dynamic&amp;&amp; calls, <span class=\"type\">bool</span> isEndOfBatch)</span> <span class=\"keyword\">override</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; call : <span class=\"built_in\">parseMethodCalls</span>(std::<span class=\"built_in\">move</span>(calls))) &#123;</span><br><span class=\"line\">    m_registry-&gt;<span class=\"built_in\">callNativeMethod</span>(call.moduleId, call.methodId, std::<span class=\"built_in\">move</span>(call.arguments), call.callId);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ModuleRegistry.cpp</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ModuleRegistry::callNativeMethod</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">int</span> moduleId, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> methodId, folly::dynamic&amp;&amp; params, <span class=\"type\">int</span> callId)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (moduleId &gt;= modules_.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> std::<span class=\"built_in\">runtime_error</span>(</span><br><span class=\"line\">      folly::<span class=\"built_in\">to</span>&lt;std::string&gt;(<span class=\"string\">&quot;moduleId &quot;</span>, moduleId, <span class=\"string\">&quot; out of range [0..&quot;</span>, modules_.<span class=\"built_in\">size</span>(), <span class=\"string\">&quot;)&quot;</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  modules_[moduleId]-&gt;<span class=\"built_in\">invoke</span>(methodId, std::<span class=\"built_in\">move</span>(params), callId);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这边代码很绕，基本就是C++和js代码反复横条，这边来总结一下。</p>\n<ol>\n<li><code>rt.global().getPropertyAsFunction(rt, &quot;__fbGenNativeModule&quot;)</code>C++调用js<code>global.__fbGenNativeModule</code></li>\n<li><code>__fbGenNativeModule</code>在js中是个全局函数，实际上调的是genModule</li>\n<li>genModule调用genMethod，genMethod内部执行的<code>BatchedBridge.enqueueNativeCall</code>，这边就是js调用native的方法</li>\n<li><code>global.nativeFlushQueueImmediate(queue)</code>js调用C++函数</li>\n<li>nativeFlushQueueImmediate调用callNativeModules，callNativeModules调用callNativeMethod，最终走到<code>modules_[moduleId]-&gt;invoke(methodId, std::move(params), callId);</code>函数中。</li>\n<li>modules_根据moduleId取到对应的类，调用方法并且传递参数，至此，js调用RN方法完成。</li>\n</ol>\n<p>modules_是RCTBridge初始化的方法列表，而方法列表是通过最开始RCT_EXPORT_MODULE来注册的。在文章开头也写了RCT_EXPORT_MODULE代码详解，这里就不重复写了。</p>\n","prev":{"title":"iOS中weak的底层原理","link":"2021/11/15/iOS中weak的底层原理"},"next":{"title":"Swift之《copy on write》","link":"2021/11/12/Swift之《copy on write》"},"plink":"http://hongweichen.github.io/2021/11/15/React-Native 原生通信/","toc":[{"id":"参考","title":"参考","index":"1"},{"id":"rct_export_module/rct_export_method","title":"RCT_EXPORT_MODULE&#x2F;RCT_EXPORT_METHOD","index":"2"},{"id":"rct_export_module","title":"RCT_EXPORT_MODULE","index":"3"},{"id":"modulename","title":"moduleName","index":"4"},{"id":"load","title":"load","index":"5"},{"id":"rct_export_method","title":"RCT_EXPORT_METHOD","index":"6"},{"id":"实现原理","title":"实现原理","index":"7"}],"reading_time":"1109 words in 7 min"}