{"title":"SwiftUI State","date":"2021-11-04T16:00:00.000Z","date_formatted":{"ll":"Nov 5, 2021","L":"11/05/2021","MM-DD":"11-05"},"author":"HongWeiChen","link":"2021/11/05/2021-11-03-SwiftUI State","tags":["SwiftUI"],"updated":"2021-11-15T07:49:02.000Z","content":"<h1 id=\"state\">State<a title=\"#state\" href=\"#state\"></a></h1>\n<p><a href=\"%5BState%5D(https://developer.apple.com/cn/documentation/swiftui/managing-user-interface-state/)\">Apple Developer</a></p>\n<h1 id=\"xcode\">Xcode<a title=\"#xcode\" href=\"#xcode\"></a></h1>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// A property wrapper type that can read and write a value managed by SwiftUI.</span></span><br><span class=\"line\"><span class=\"comment\">///</span></span><br><span class=\"line\"><span class=\"comment\">/// SwiftUI manages the storage of any property you declare as a state. When the</span></span><br><span class=\"line\"><span class=\"comment\">/// state value changes, the view invalidates its appearance and recomputes the</span></span><br><span class=\"line\"><span class=\"comment\">/// body. Use the state as the single source of truth for a given view.</span></span><br><span class=\"line\"><span class=\"comment\">///</span></span><br><span class=\"line\"><span class=\"comment\">/// A ``State`` instance isn&#x27;t the value itself; it&#x27;s a means of reading and</span></span><br><span class=\"line\"><span class=\"comment\">/// writing the value. To access a state&#x27;s underlying value, use its variable</span></span><br><span class=\"line\"><span class=\"comment\">/// name, which returns the ``State/wrappedValue`` property value.</span></span><br><span class=\"line\"><span class=\"comment\">///</span></span><br><span class=\"line\"><span class=\"comment\">/// You should only access a state property from inside the view&#x27;s body, or from</span></span><br><span class=\"line\"><span class=\"comment\">/// methods called by it. For this reason, declare your state properties as</span></span><br><span class=\"line\"><span class=\"comment\">/// private, to prevent clients of your view from accessing them. It is safe to</span></span><br><span class=\"line\"><span class=\"comment\">/// mutate state properties from any thread.</span></span><br><span class=\"line\"><span class=\"comment\">///</span></span><br><span class=\"line\"><span class=\"comment\">/// To pass a state property to another view in the view hierarchy, use the</span></span><br><span class=\"line\"><span class=\"comment\">/// variable name with the `$` prefix operator. This retrieves a binding of the</span></span><br><span class=\"line\"><span class=\"comment\">/// state property from its ``State/projectedValue`` property. For example, in</span></span><br><span class=\"line\"><span class=\"comment\">/// the following code example `PlayerView` passes its state property</span></span><br><span class=\"line\"><span class=\"comment\">/// `isPlaying` to `PlayButton` using `$isPlaying`:</span></span><br><span class=\"line\"><span class=\"comment\">///</span></span><br><span class=\"line\"><span class=\"comment\">///     struct PlayerView: View &#123;</span></span><br><span class=\"line\"><span class=\"comment\">///         var episode: Episode</span></span><br><span class=\"line\"><span class=\"comment\">///         @State private var isPlaying: Bool = false</span></span><br><span class=\"line\"><span class=\"comment\">///</span></span><br><span class=\"line\"><span class=\"comment\">///         var body: some View &#123;</span></span><br><span class=\"line\"><span class=\"comment\">///             VStack &#123;</span></span><br><span class=\"line\"><span class=\"comment\">///                 Text(episode.title)</span></span><br><span class=\"line\"><span class=\"comment\">///                 Text(episode.showTitle)</span></span><br><span class=\"line\"><span class=\"comment\">///                 PlayButton(isPlaying: $isPlaying)</span></span><br><span class=\"line\"><span class=\"comment\">///             &#125;</span></span><br><span class=\"line\"><span class=\"comment\">///         &#125;</span></span><br><span class=\"line\"><span class=\"comment\">///     &#125;</span></span><br></pre></td></tr></table></figure>\n<p>一种属性包装器类型，可以读取和写入 SwiftUI 管理的值。</p>\n<p>SwiftUI会管理任何使用@State声明的属性，当State值发生变化，SwiftUI会使关联的UI失效并重新计算。</p>\n<p>State实例不是值本身，只是一种阅读方式，State提供了读取和写入Value值。要访问状态的基础值，请使用变量name，他返回State/wrappedValue的属性值</p>\n<ul>\n<li>State/wrappedValue 与 @propertyWrapper是息息相关的</li>\n</ul>\n<p>要将状态属性传递给视图层次结构中的另一个视图，请使用带有$前缀运算符的变量名。这将检索状态属性来自于State/projectedValue属性</p>\n<ul>\n<li>如果没有带有$就在SwiftUI中使用的话，编译器会报错，并且提示’insert $’</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@available</span>(<span class=\"keyword\">iOS</span> <span class=\"number\">13.0</span>, <span class=\"keyword\">macOS</span> <span class=\"number\">10.15</span>, <span class=\"keyword\">tvOS</span> <span class=\"number\">13.0</span>, <span class=\"keyword\">watchOS</span> <span class=\"number\">6.0</span>, <span class=\"operator\">*</span>)</span><br><span class=\"line\"><span class=\"keyword\">@frozen</span> <span class=\"keyword\">@propertyWrapper</span> <span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">State</span>&lt;<span class=\"title class_\">Value</span>&gt; : <span class=\"title class_\">DynamicProperty</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Creates the state with an initial wrapped value.</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">/// You don&#x27;t call this initializer directly. Instead, declare a property</span></span><br><span class=\"line\">    <span class=\"comment\">/// with the `@State` attribute, and provide an initial value; for example,</span></span><br><span class=\"line\">    <span class=\"comment\">/// `@State private var isPlaying: Bool = false`.</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">/// - Parameter wrappedValue: An initial wrappedValue for a state.</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">init</span>(<span class=\"params\">wrappedValue</span> <span class=\"params\">value</span>: <span class=\"type\">Value</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// Creates the state with an initial value.</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">/// - Parameter value: An initial value of the state.</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">init</span>(<span class=\"params\">initialValue</span> <span class=\"params\">value</span>: <span class=\"type\">Value</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// The underlying value referenced by the state variable.</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">/// This property provides primary access to the value&#x27;s data. However, you</span></span><br><span class=\"line\">    <span class=\"comment\">/// don&#x27;t access `wrappedValue` directly. Instead, you use the property</span></span><br><span class=\"line\">    <span class=\"comment\">/// variable created with the `@State` attribute. For example, in the</span></span><br><span class=\"line\">    <span class=\"comment\">/// following code example the button&#x27;s actions toggles the value of</span></span><br><span class=\"line\">    <span class=\"comment\">/// `showingProfile`, which toggles `wrappedValue`:</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">///     @State private var showingProfile = false</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">///     var profileButton: some View &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">///         Button(action: &#123; self.showingProfile.toggle() &#125;) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">///             Image(systemName: &quot;person.crop.circle&quot;)</span></span><br><span class=\"line\">    <span class=\"comment\">///                 .imageScale(.large)</span></span><br><span class=\"line\">    <span class=\"comment\">///                 .accessibilityLabel(Text(&quot;User Profile&quot;))</span></span><br><span class=\"line\">    <span class=\"comment\">///                 .padding()</span></span><br><span class=\"line\">    <span class=\"comment\">///         &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">///     &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">/// When a mutable binding value changes, the new value is immediately</span></span><br><span class=\"line\">    <span class=\"comment\">/// available. However, updates to a view displaying the value happens</span></span><br><span class=\"line\">    <span class=\"comment\">/// asynchronously, so the view may not show the change immediately.</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> wrappedValue: <span class=\"type\">Value</span> &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">nonmutating</span> <span class=\"keyword\">set</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/// A binding to the state value.</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">/// Use the projected value to pass a binding value down a view hierarchy.</span></span><br><span class=\"line\">    <span class=\"comment\">/// To get the `projectedValue`, prefix the property variable with `$`. For</span></span><br><span class=\"line\">    <span class=\"comment\">/// example, in the following code example `PlayerView` projects a binding</span></span><br><span class=\"line\">    <span class=\"comment\">/// of the state property `isPlaying` to the `PlayButton` view using</span></span><br><span class=\"line\">    <span class=\"comment\">/// `$isPlaying`.</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">///     struct PlayerView: View &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">///         var episode: Episode</span></span><br><span class=\"line\">    <span class=\"comment\">///         @State private var isPlaying: Bool = false</span></span><br><span class=\"line\">    <span class=\"comment\">///</span></span><br><span class=\"line\">    <span class=\"comment\">///         var body: some View &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">///             VStack &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">///                 Text(episode.title)</span></span><br><span class=\"line\">    <span class=\"comment\">///                 Text(episode.showTitle)</span></span><br><span class=\"line\">    <span class=\"comment\">///                 PlayButton(isPlaying: $isPlaying)</span></span><br><span class=\"line\">    <span class=\"comment\">///             &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">///         &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">///     &#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">var</span> projectedValue: <span class=\"type\">Binding</span>&lt;<span class=\"type\">Value</span>&gt; &#123; <span class=\"keyword\">get</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>State是一个结构体，实现了DynamicProperty，有两个注解</p>\n<ul>\n<li>@frozen</li>\n<li>@propertyWrapper</li>\n</ul>\n<p>DynamicProperty是一个Protocol，也就是State内部，实现了update的方法</p>\n<p>通过网上一些文章可以了解到，State是通过struct值变化通知SwiftUI，使当前视图失效并且重新计算。</p>\n<ul>\n<li>Why @state only works with structs\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/111033422\" target=\"_blank\">知乎</a></li>\n<li><a href=\"https://www.hackingwithswift.com/books/ios-swiftui/why-state-only-works-with-structs\" target=\"_blank\">hackingwithswift</a></li>\n</ul>\n</li>\n</ul>\n<p>文章中解释了为什么@state只可以在struct中使用，大概意思是，结构体本身是不可变的，我们无法修改的它的属性，Swift需要销毁并且重建整个结构以完成属性的的改动。类并不需要，因为哪怕类本身是一个常量，Swift仍然可以直接修改它的变量属性。</p>\n<ul>\n<li>重点就在于 class是引用类型，struct是值类型。</li>\n</ul>\n<p>当然如果我们要实现数据共享，可以使用ObservedObject，文章中也有讲解到。</p>\n<p>还有几个疑问点：</p>\n<ul>\n<li>$符号是如何实现的，我能否自己实现一个类似于State的注解</li>\n<li>State底层是如何进行销毁后又重新创建再通知到SwiftUI的</li>\n</ul>\n<p>翻阅了很多文档都没看到相关的资料，在Apple上也没有相关的文档，若能翻阅到相关文档后续再更新吧。</p>\n","prev":{"title":"SwiftUI Comebine","link":"2021/11/05/2021-11-02-SwiftUI Combine"},"next":{"title":"SwiftUI StateObject","link":"2021/11/05/2021-11-04-SwiftUI StateObject"},"plink":"http://hongweichen.github.io/2021/11/05/2021-11-03-SwiftUI State/","toc":[{"id":"state","title":"State","index":"1"},{"id":"xcode","title":"Xcode","index":"2"}],"reading_time":"1112 words in 7 min"}