{"title":"HTTP协议","date":"2021-08-15T16:00:00.000Z","date_formatted":{"ll":"Aug 16, 2021","L":"08/16/2021","MM-DD":"08-16"},"link":"2021/08/16/HTTP协议","tags":["HTTP"],"updated":"2022-02-21T15:52:34.553Z","content":"<h1 id=\"http的特性\">HTTP的特性<a title=\"#http的特性\" href=\"#http的特性\"></a></h1>\n<ul>\n<li>HTTP协议构建于TCP/IP协议之上，是一个应用层协议，默认端口号是80</li>\n<li>HTTP是无连接无状态的</li>\n</ul>\n<h1 id=\"http报文\">HTTP报文<a title=\"#http报文\" href=\"#http报文\"></a></h1>\n<h2 id=\"请求报文\">请求报文<a title=\"#请求报文\" href=\"#请求报文\"></a></h2>\n<p>HTTP 协议是以 ASCII 码传输，建立在 TCP/IP 协议之上的应用层规范。规范把 HTTP 请求分为三个部分：状态行、请求头、消息主体。类似于下面这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;method&gt; &lt;request-URL&gt; &lt;version&gt;</span><br><span class=\"line\">&lt;headers&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;entity-body&gt;</span><br></pre></td></tr></table></figure>\n<p>HTTP定义了与服务器交互的不同方法，最基本的方法有4种，分别是GET、POST、PUT、DELETE。URL全称是资源描述符，我们可以这样认为：一个URL地址，它用于描述一个网络上的资源，而HTTP中的GET、POST、PUT、DELETE就对应着这个资源的查、增、改、删4个操作。</p>\n<ol>\n<li>GET请求用于信息获取，而且应该是安全的和幂等的。<br>\n所谓安全的意味着该操作用于获取信息而非修改信息。换句话说，GET请求一般不应产生副作用。就是说，它仅仅是获取资源信息，就像查询数据库一样，不会修改，不会影响资源状态。<br>\n幂等的意味着对同一URL的多个请求应该返回同样的结果。<br>\nGET请求报文示例：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /books/?sex=man&amp;name=Professional HTTP/1.1</span><br><span class=\"line\">Host: www.example.com</span><br><span class=\"line\">User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)</span><br><span class=\"line\">Gecko/20050225 Firefox/1.0.1</span><br><span class=\"line\">Connection: Keep-Alive</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>POST表示可能修改变服务器上的资源的请求</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST / HTTP/1.1</span><br><span class=\"line\">Host: www.example.com</span><br><span class=\"line\">User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)</span><br><span class=\"line\">Gecko/20050225 Firefox/1.0.1</span><br><span class=\"line\">Content-Type: application/x-www-form-urlencoded</span><br><span class=\"line\">Content-Length: 40</span><br><span class=\"line\">Connection: Keep-Alive</span><br><span class=\"line\"></span><br><span class=\"line\">sex=man&amp;name=Professional  </span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>注意：</li>\n</ol>\n<ul>\n<li>GET可提交的数据量受到URL长度的限制，HTTP协议规范没有对URL长度进行限制。这个限制是特定浏览器及服务器对它的限制。</li>\n<li>理论上讲，POST是没有大小限制的，HTTP协议规范也没有进行大小限制，出于安全考虑，服务器软件在实现时会做一定限制。</li>\n<li>参考上面的报文示例，可以发现GET和POST数据内容是一模一样的，只是位置不同，一个在URL里，一个在HTTP包的包体了。</li>\n</ul>\n<h1 id=\"post提交数据的方式\">POST提交数据的方式<a title=\"#post提交数据的方式\" href=\"#post提交数据的方式\"></a></h1>\n<p>HTTP协议中规定POST提交的数据必须在body部分中，但是协议中没有规范数据使用哪种编码方式或者数据格式。实际上，开发者完全可以自己决定消息主体的格式，只要最后发送的HTTP请求满足上面的格式就可以。</p>\n<p>但是，数据发送出去，还要服务端解析成功才有意义。一般服务端语言如PHP、Python等，以及它们的framework，都内置了自动解析常见数据格式的功能。服务端通常是根据请求头（headers）中的Content-Type字段来获取请求中的消息主体是用何种方式编码，再对主体进行解析。所以说到POST提交数据方案，包含了Content-Type和消息主体编码方式两部分。下面就正式开始介绍它们：</p>\n","prev":{"title":"2021个人年度总结以及感想","link":"2021/10/31/2021个人年度总结以及感想"},"next":{"title":"TCP协议","link":"2021/08/14/TCP协议"},"plink":"http://hongweichen.github.io/2021/08/16/HTTP协议/","toc":[{"id":"http的特性","title":"HTTP的特性","index":"1"},{"id":"http报文","title":"HTTP报文","index":"2","children":[{"id":"请求报文","title":"请求报文","index":"2.1"}]},{"id":"post提交数据的方式","title":"POST提交数据的方式","index":"3"}],"reading_time":"827 words in 6 min"}