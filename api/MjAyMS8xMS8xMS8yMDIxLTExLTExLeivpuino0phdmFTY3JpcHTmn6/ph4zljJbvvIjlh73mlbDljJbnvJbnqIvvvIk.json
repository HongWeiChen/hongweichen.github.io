{"title":"JavaScript中柯里化（函数化编程）","date":"2021-11-10T16:00:00.000Z","date_formatted":{"ll":"Nov 11, 2021","L":"11/11/2021","MM-DD":"11-11"},"link":"2021/11/11/2021-11-11-详解JavaScript柯里化（函数化编程）","tags":["JavaScript"],"updated":"2022-02-21T11:50:28.590Z","content":"<h1 id=\"前言\">前言<a title=\"#前言\" href=\"#前言\"></a></h1>\n<p>前阵子在翻看Redux源码的时候，突然看到createStore中有个代码是</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createStore</span>(<span class=\"params\">preloadState, state, enhancer</span>) &#123;</span><br><span class=\"line\">  ...忽略一大段代码</span><br><span class=\"line\">  <span class=\"title function_\">enhancer</span>(createStore)(preloadState, state)</span><br><span class=\"line\">  ...忽略一大段代码</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对JavaScript的了解层度不深，瞬间有点疑惑这行代码是干嘛的。</p>\n<p>问了下Web前端开发的同事，才知道这个叫柯里化（一开始听成颗粒化了），一听就是高大上了。</p>\n<p>后面又了解到，其实这个就是函数式编程。</p>\n<p>其实在Objective-C的Masonry框架中，基本运用的就是函数式编程，就是柯里化，只是换了个名称。</p>\n<h1 id=\"柯里化\">柯里化<a title=\"#柯里化\" href=\"#柯里化\"></a></h1>\n<blockquote>\n<p>维基百科：是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术</p>\n</blockquote>\n<p>示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> ret = <span class=\"title function_\">sum</span>(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ret)</span><br><span class=\"line\"><span class=\"comment\">// 7</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 转换成Currying -&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">y</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> ret = <span class=\"title function_\">sum</span>(<span class=\"number\">3</span>)(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ret)</span><br><span class=\"line\"><span class=\"comment\">// 7</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"currying的作用\">Currying的作用<a title=\"#currying的作用\" href=\"#currying的作用\"></a></h1>\n<ul>\n<li><a href=\"#%E5%8F%82%E6%95%B0%E5%A4%8D%E7%94%A8\">参数复用</a></li>\n<li><a href=\"#%E6%8F%90%E5%89%8D%E7%A1%AE%E8%AE%A4\">提前确认</a></li>\n<li><a href=\"#%E5%BB%B6%E8%BF%9F%E8%BF%90%E8%A1%8C\">延迟运行</a></li>\n</ul>\n<h1 id=\"参数复用\">参数复用<a title=\"#参数复用\" href=\"#参数复用\"></a></h1>\n<p>这种写法也经常出现在面试题中，起码我就见过。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + <span class=\"number\">4</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> sumFunc = <span class=\"title function_\">sum</span>()</span><br><span class=\"line\"><span class=\"comment\">// 复用sumFunc</span></span><br><span class=\"line\"><span class=\"title function_\">sumFunc</span>(<span class=\"number\">1</span>) <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"title function_\">sumFunc</span>(<span class=\"number\">2</span>) <span class=\"comment\">// 6</span></span><br><span class=\"line\"><span class=\"title function_\">sumFunc</span>(<span class=\"number\">3</span>) <span class=\"comment\">// 7</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"提前确认\">提前确认<a title=\"#提前确认\" href=\"#提前确认\"></a></h1>\n<p>提前确认使用的方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">calculate</span>(<span class=\"params\">isAdd</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isAdd == <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> x - y</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> add = <span class=\"title function_\">calculate</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\"><span class=\"title function_\">add</span>(<span class=\"number\">3</span>, <span class=\"number\">4</span>) <span class=\"comment\">// 7</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sub = <span class=\"title function_\">calculate</span>(<span class=\"literal\">false</span>)</span><br><span class=\"line\"><span class=\"title function_\">sub</span>(<span class=\"number\">4</span>, <span class=\"number\">3</span>) <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"延迟运行\">延迟运行<a title=\"#延迟运行\" href=\"#延迟运行\"></a></h1>\n<p>这个就没有好示例的，上面的方法基本已经做了延迟运行的事情。也就是可以先声明好对应的方法，以及编写好对应的逻辑，有需要的时候再去使用。</p>\n<h1 id=\"性能方面\">性能方面<a title=\"#性能方面\" href=\"#性能方面\"></a></h1>\n<ul>\n<li>存取arguments对象通常要比存取命名参数要慢一点</li>\n<li>一些老版本的浏览器在arguments.length上的实现上是相当慢的</li>\n<li>使用fn.call(…)与fn.bind(…)通常比fn(…)要慢一些</li>\n<li>创建大量嵌套作用域和闭包函数会带来花销，无论是内存还是速度上</li>\n</ul>\n<p>参考</p>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/2975c25e4d71\" target=\"_blank\">简书</a></li>\n</ul>\n","prev":{"title":"Swift中的Copy on write","link":"2021/11/12/Swift中的Copy on write"},"next":{"title":"React-Native运行原理","link":"2021/11/10/2021-11-10-React-Native运行原理"},"plink":"http://hongweichen.github.io/2021/11/11/2021-11-11-详解JavaScript柯里化（函数化编程）/","toc":[{"id":"前言","title":"前言","index":"1"},{"id":"柯里化","title":"柯里化","index":"2"},{"id":"currying的作用","title":"Currying的作用","index":"3"},{"id":"参数复用","title":"参数复用","index":"4"},{"id":"提前确认","title":"提前确认","index":"5"},{"id":"延迟运行","title":"延迟运行","index":"6"},{"id":"性能方面","title":"性能方面","index":"7"}],"reading_time":"587 words in 4 min"}