{"title":"2021个人年度总结以及感想","date":"2021-10-30T16:00:00.000Z","date_formatted":{"ll":"Oct 31, 2021","L":"10/31/2021","MM-DD":"10-31"},"link":"2021/10/31/2021-10-31-2021个人年度总结以及感想","tags":["随笔"],"updated":"2022-02-21T11:54:28.328Z","content":"<h1 id=\"2021个人年度总结以及感想\">2021个人年度总结以及感想<a title=\"#2021个人年度总结以及感想\" href=\"#2021个人年度总结以及感想\"></a></h1>\n<p>2021年开始从事了React-Native的工作。</p>\n<p>主要使用语言是JavaScript，也是第一次实战接触React-Native混合开发（之前也写过2-3个月Flutter不过时间太短了，就不提了）。</p>\n<p>React-Native相对于Objective-C、Swift原生开发来说，确实在搭建页面代码实现上，较为迅速（不与SwiftUI对比）</p>\n<p>尽管React-Native底层是用原生组件来进行开发的，仍然会感觉到在渲染方面不如原生体验来得好（不过目前公司所用版本是React-Native 0.57,新版本0.64或者预览版等都没试过）。</p>\n<p>这方面确实也体现原生iOS开发的巨大优势（回头试下其他版本说不定React-Native效果可以）</p>\n<h1 id=\"js端注册组件\">JS端注册组件<a title=\"#js端注册组件\" href=\"#js端注册组件\"></a></h1>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AppRegistry.registerComponent(appName, () =&gt; App)</span><br></pre></td></tr></table></figure>\n<h1 id=\"js端注册定时器\">JS端注册定时器<a title=\"#js端注册定时器\" href=\"#js端注册定时器\"></a></h1>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AppRegistry.registerRunnable(&#x27;TimeTask&#x27;, TimerTask())</span><br></pre></td></tr></table></figure>\n<h1 id=\"ios端定义启动组件\">iOS端定义启动组件<a title=\"#ios端定义启动组件\" href=\"#ios端定义启动组件\"></a></h1>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];</span><br><span class=\"line\">RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge</span><br><span class=\"line\">                                                 moduleName:@&quot;theMixc&quot;</span><br><span class=\"line\">                                          initialProperties:nil];</span><br><span class=\"line\"></span><br><span class=\"line\">rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];</span><br><span class=\"line\"></span><br><span class=\"line\">self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];</span><br><span class=\"line\">UIViewController *rootViewController = [UIViewController new];</span><br><span class=\"line\">rootViewController.view = rootView;</span><br><span class=\"line\">self.window.rootViewController = rootViewController;</span><br></pre></td></tr></table></figure>\n<h1 id=\"实例化\">实例化<a title=\"#实例化\" href=\"#实例化\"></a></h1>\n<ul>\n<li>static defaultProps = {}</li>\n</ul>\n<p>组件类型首次实例化时初始化默认props属性，多实例共享</p>\n<ul>\n<li>construct(props) { state = {} }</li>\n</ul>\n<p>实例化时初始化默认state属性</p>\n<ul>\n<li>componentWillMount</li>\n</ul>\n<p>在渲染之前触发一次</p>\n<ul>\n<li>render</li>\n</ul>\n<p>渲染函数，返回DOM树结构</p>\n<ul>\n<li>componentDidMount</li>\n</ul>\n<p>在渲染之后触发一次</p>\n<h2 id=\"重渲染逻辑\">重渲染逻辑<a title=\"#重渲染逻辑\" href=\"#重渲染逻辑\"></a></h2>\n<ul>\n<li>componentWillReceiveProps</li>\n</ul>\n<p>组件接收到新的props时调用，并将其作为参数nextProps使用，可在此更改组件state</p>\n<ul>\n<li>shouldComponentUpdate</li>\n</ul>\n<p>判断是否需要更新组件，在首次渲染期间或者调用了forceUpdate方法后，该方法不会被调用</p>\n<ul>\n<li>componentWillUpdate</li>\n</ul>\n<p>更新渲染前调用</p>\n<ul>\n<li>render</li>\n</ul>\n<p>渲染函数，返回DOM树结构</p>\n<ul>\n<li>componentDidUpdate</li>\n</ul>\n<p>更新渲染后调用</p>\n<h1 id=\"销毁\">销毁<a title=\"#销毁\" href=\"#销毁\"></a></h1>\n<ul>\n<li>componentWillUnmount</li>\n</ul>\n<p>组件移除之前调用</p>\n<h1 id=\"react-redux\">React-Redux<a title=\"#react-redux\" href=\"#react-redux\"></a></h1>\n<p>待续</p>\n","prev":{"title":"使用 Property Wrapper 为 Codable 解码设定默认值","link":"2021/11/01/2021-11-01-使用 Property Wrapper 为 Codable 解码设定默认值"},"next":{"title":"HTTP协议","link":"2021/08/16/2021-08-16-HTTP协议"},"plink":"http://hongweichen.github.io/2021/10/31/2021-10-31-2021个人年度总结以及感想/","toc":[{"id":"2021个人年度总结以及感想","title":"2021个人年度总结以及感想","index":"1"},{"id":"js端注册组件","title":"JS端注册组件","index":"2"},{"id":"js端注册定时器","title":"JS端注册定时器","index":"3"},{"id":"ios端定义启动组件","title":"iOS端定义启动组件","index":"4"},{"id":"实例化","title":"实例化","index":"5","children":[{"id":"重渲染逻辑","title":"重渲染逻辑","index":"5.1"}]},{"id":"销毁","title":"销毁","index":"6"},{"id":"react-redux","title":"React-Redux","index":"7"}],"reading_time":"485 words in 3 min"}